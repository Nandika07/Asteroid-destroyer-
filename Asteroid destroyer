import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.*;

public class AsteroidDestroyer extends JPanel implements ActionListener, KeyListener {

    
    class Block {
        int x, y, width, height;
        Image img;
        boolean alive = true;
        boolean used = false;

        Block(int x, int y, int width, int height, Image img) {
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            this.img = img;
        }
    }

    int titleSize = 32;
    int rows = 16, columns = 16;
    int boardWidth = titleSize * columns, boardHeight = titleSize * rows;

    Image alienShipImg, alienAsteroidImg, alienCyanImg, alienMagentaImg, alienYellowImg;
    ArrayList<Image> alienImgArray;
    Block ship;
    ArrayList<Block> alienArray;
    ArrayList<Block> bulletArray;

    int shipWidth = titleSize * 2, shipHeight = titleSize;
    int shipX = titleSize * columns / 2 - titleSize, shipY = titleSize * rows - titleSize * 2;
    int shipVelocityX = titleSize;

    int alienWidth = titleSize * 2, alienHeight = titleSize;
    int alienX = titleSize, alienY = titleSize;
    int alienRows = 2, alienColumns = 3, alienCount = 0, alienVelocityX = 1;

    int bulletWidth = titleSize / 8, bulletHeight = titleSize / 2, bulletVelocityY = -10;

    Timer gameLoop;
    boolean gameOver = false;
    int score = 0;

    public AsteroidDestroyer() {
        setPreferredSize(new Dimension(boardWidth, boardHeight));
        setBackground(Color.BLACK);
        setFocusable(true);
        addKeyListener(this);

        alienShipImg = new ImageIcon(getClass().getResource("alienship.png")).getImage();
        alienAsteroidImg = new ImageIcon(getClass().getResource("alienasteroid.png")).getImage();
        alienCyanImg = new ImageIcon(getClass().getResource("aliencyan.png")).getImage();
        alienMagentaImg = new ImageIcon(getClass().getResource("alienmagenta.png")).getImage();
        alienYellowImg = new ImageIcon(getClass().getResource("alienyellow.png")).getImage();

        alienImgArray = new ArrayList<>();
        alienImgArray.add(alienCyanImg);
        alienImgArray.add(alienAsteroidImg);
        alienImgArray.add(alienMagentaImg);
        alienImgArray.add(alienYellowImg);

        ship = new Block(shipX, shipY, shipWidth, shipHeight, alienShipImg);
        alienArray = new ArrayList<>();
        bulletArray = new ArrayList<>();

        gameLoop = new Timer(1000 / 60, this);
        createAliens();
        gameLoop.start();
    }

    public void createAliens() {
        Random random = new Random();
        for (int c = 0; c < alienColumns; c++) {
            for (int r = 0; r < alienRows; r++) {
                int randomImgIndex = random.nextInt(alienImgArray.size());
                Block alien = new Block(
                    alienX + c * alienWidth,
                    alienY + r * alienHeight,
                    alienWidth,
                    alienHeight,
                    alienImgArray.get(randomImgIndex)
                );
                alienArray.add(alien);
            }
        }
        alienCount = alienArray.size();
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        draw(g);
    }

    public void draw(Graphics g) {
        g.drawImage(ship.img, ship.x, ship.y, ship.width, ship.height, null);

        for (Block alien : alienArray) {
            if (alien.alive) {
                g.drawImage(alien.img, alien.x, alien.y, alien.width, alien.height, null);
            }
        }

        g.setColor(Color.WHITE);
        for (Block bullet : bulletArray) {
            g.fillRect(bullet.x, bullet.y, bullet.width, bullet.height);
        }

        g.setFont(new Font("Arial", Font.BOLD, 20));
        if (gameOver) {
            g.drawString("Press any key to continue, Game Over: " + score, 10, 35);
        } else {
            g.drawString("Score: " + score, 10, 35);
        }
    }

    public boolean detectCollision(Block a, Block b) {
        return a.x < b.x + b.width &&
               a.x + a.width > b.x &&
               a.y < b.y + b.height &&
               a.y + a.height > b.y;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        move();
        repaint();
        if (gameOver) {
            gameLoop.stop();
        }
    }

    public void move() {
        for (Block alien : alienArray) {
            if (alien.alive) {
                alien.x += alienVelocityX;

                if (alien.x + alien.width >= boardWidth || alien.x <= 0) {
                    alienVelocityX *= -1;
                    alien.x += alienVelocityX * 2;

                    for (Block a : alienArray) {
                        a.y += alienHeight;
                    }
                }

                if (alien.y >= ship.y) {
                    gameOver = true;
                }
            }
        }

        for (Block bullet : bulletArray) {
            bullet.y += bulletVelocityY;
            for (Block alien : alienArray) {
                if (!bullet.used && alien.alive && detectCollision(bullet, alien)) {
                    bullet.used = true;
                    alien.alive = false;
                    alienCount--;
                    score += 100;
                }
            }
        }

        bulletArray.removeIf(b -> b.used || b.y < 0);

        if (alienCount == 0) {
            alienColumns = Math.min(alienColumns + 1, columns / 2 - 2);
            alienRows = Math.min(alienRows + 1, rows - 6);
            alienArray.clear();
            bulletArray.clear();
            alienVelocityX = 3;
            createAliens();
        }
    }

    @Override
    public void keyPressed(KeyEvent e) {}

    @Override
    public void keyTyped(KeyEvent e) {}

    @Override
    public void keyReleased(KeyEvent e) {
        if (gameOver) {
            gameOver = false;
            score = 0;
            alienColumns = 3;
            alienRows = 2;
            alienVelocityX = 1;
            ship.x = shipX;
            alienArray.clear();
            bulletArray.clear();
            createAliens();
            gameLoop.start();
        } else if (e.getKeyCode() == KeyEvent.VK_LEFT && ship.x - shipVelocityX >= 0) {
            ship.x -= shipVelocityX;
        } else if (e.getKeyCode() == KeyEvent.VK_RIGHT && ship.x + shipVelocityX + ship.width <= boardWidth) {
            ship.x += shipVelocityX;
        } else if (e.getKeyCode() == KeyEvent.VK_SPACE) {
            Block bullet = new Block(ship.x + shipWidth / 2 - bulletWidth / 2, ship.y, bulletWidth, bulletHeight, null);
            bulletArray.add(bullet);
        }
    }
}
